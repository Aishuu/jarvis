//Note: function details mostly in 'forward' function

#ifndef TRANSLATE_NXC
#define TRANSLATE_NXC

#include "constant.h"

//#define WH_DIST 11.3
#define DIAM 5.5
#define TRANSLATE_DEFAULT_SPEED 60
#define TRANSLATE_RECTIF_COEFF 0.5

void forward(float distance, char speed=TRANSLATE_DEFAULT_SPEED) {
     long  l_rotc,r_rotc,         //rotation counter
           l_rotc_i,r_rotc_i,     //initial rotc values
           l_rotc_d,r_rotc_d;     //destination rotc values
     float x_dep,y_dep,theta_dep, //initial position
           angle,rectif,dist;     //local variables

     //init interesting values
     x_dep=current_pos.x;
     y_dep=current_pos.y;
     theta_dep=current_pos.theta;

     l_rotc=MotorRotationCount(OUT_A);
     r_rotc=MotorRotationCount(OUT_B);
     l_rotc_i=l_rotc;
     r_rotc_i=r_rotc;

     angle = distance/DIAM/PI*360;    //how much the wheels must rotate in degrees

     l_rotc_d=l_rotc+angle;
     r_rotc_d=r_rotc+angle;
     //end init

     while( (l_rotc_d>l_rotc || r_rotc_d>r_rotc) && !STOP ) {
         l_rotc=MotorRotationCount(OUT_A); //update rotation...
         r_rotc=MotorRotationCount(OUT_B); // ...counts info
         //compute speed rectification coefficient to move straight
         rectif=(l_rotc-l_rotc_i-r_rotc+r_rotc_i)*TRANSLATE_RECTIF_COEFF;
         //if rectif>0, need to turn left
         OnFwd(OUT_A, speed-rectif ); //left motor
         OnFwd(OUT_B, speed+rectif ); //right motor

         //odometry segment
         ///////////////////////////////////////////
         /*              ODO NOTES                */
         //dist = radius*(omegal+omegar)/2        //
         //     = radius*(rotcl+rotcr)/2*2PI/360  //
         //                                       //
         //dtheta = radius/whdist*(omegar-omegal) //
         //       = radius/whdist*(rotcr-rotcl)   //
         /*              ODO NOTES                */
         ///////////////////////////////////////////
         dist=DIAM*(l_rotc-l_rotc_i+r_rotc-r_rotc_i)/2*PI/360;
         current_pos.x=x_dep+dist*cos(theta_dep*PI/180); // cos/sin take rad input
         current_pos.y=y_dep+dist*sin(theta_dep*PI/180);
     }
     Off(OUT_AB);
     STOP=false;
} //forward

void backward(float distance, char speed=TRANSLATE_DEFAULT_SPEED) {
     long  l_rotc,r_rotc,         //rotation counter
           l_rotc_i,r_rotc_i,     //initial rotc values
           l_rotc_d,r_rotc_d;     //destination rotc values
     float x_dep,y_dep,theta_dep, //initial position
           angle,rectif,dist;     //local variables

     x_dep=current_pos.x;
     y_dep=current_pos.y;
     theta_dep=current_pos.theta;

     l_rotc=MotorRotationCount(OUT_A);
     r_rotc=MotorRotationCount(OUT_B);
     l_rotc_i=l_rotc;
     r_rotc_i=r_rotc;

     angle = distance/DIAM/PI*360;  //distance is absolute! ...

     l_rotc_d=l_rotc-angle;         // ...angle is thus absolute
     r_rotc_d=r_rotc-angle;

     while( (l_rotc_d<l_rotc || r_rotc_d<r_rotc) && !STOP ) {
         l_rotc=MotorRotationCount(OUT_A);
         r_rotc=MotorRotationCount(OUT_B);
         rectif=(l_rotc-l_rotc_i-r_rotc+r_rotc_i)*TRANSLATE_RECTIF_COEFF;
         //if rectif>0 , need to turn backward right
         OnRev(OUT_A, speed+rectif ); //left motor
         OnRev(OUT_B, speed-rectif ); //right motor
         
         //odometry segment
         dist=DIAM*(l_rotc-l_rotc_i+r_rotc-r_rotc_i)/2*PI/360;  //dist is algebraic !!!
         current_pos.x=x_dep+dist*cos(theta_dep*PI/180);
         current_pos.y=y_dep+dist*sin(theta_dep*PI/180);
     }
     Off(OUT_AB);
     STOP=false
} //backward

void translate(float distance, char speed=TRANSLATE_DEFAULT_SPEED) {
     Acquire(movement_mutex);
     if (distance>=0) {
        forward(distance, speed);
     } else {
        backward(-distance, speed); //distance must be absolute!
     }
     Release(movement_mutex);
}

#endif //translate.nxc
