#ifndef DETECT_BALL_NXC
#define DETECT_BALL_NXC

#include "constant.h"

#include "movement.nxc"
#include "arm.nxc"

#define DIST_BALL       10
#define DIST_BALL_MAX   60
#define ANGLE_BALL      70
#define ANGLE_RECTIF    5
#define RESOL           15

int angle_init, angle_center;
int nb_file;

task turn_find_ball() {
    rotate(360, 15);
}

int getDistanceToWall(int x, int y) {
    int x1, x2, y1, y2;
    x1 = x-XMIN;
    x2 = XMAX-x;
    y1 = y-YMIN;
    y2 = YMAX-y;
    return x1<x2 ? x1<y1 ? x1<y2 ? x1 : y2 : y1<y2 ? y1 : y2 : x2<y1 ? x2<y2 ? x2 : y2 : y1<y2 ? y1 : y2;
}

void monitor_ball() {
    int i;
    /*
    nb_file++;
    string filename = StrCat("dump", NumToStr(nb_file));
    string s;
    byte fileHandle;
    short b_written;
    DeleteFile(filename);
    CreateFile(filename, 4096, fileHandle);
    WriteLnString(fileHandle, "#theta\t\t\tradar", b_written);
    */
    float theta_init = current_pos.theta;
    for(i=0; i<360/RESOL; i++) {
        setTheta(theta_init+i*RESOL);
        Wait(500);
        int r = ultras;
        /*
        s = StrCat(NumToStr(current_pos.theta), "\t\t\t", NumToStr(r));
        WriteLnString(fileHandle, s, b_written);
        */
    }
}

void find_ball(bool &ball_found, float &ball_found_x, float &ball_found_y) {
    /*
    angle_init = 0;
    angle_center = 0;
    ROTATING = true;
    nb_file = 0;
    //start turn_find_ball;
    */
    monitor_ball();
    
    // TODO: dummy implementation here
    ball_found = true;
    ball_found_x = 20;
    ball_found_y = 45;
}

#endif      // detect_ball.nxc
