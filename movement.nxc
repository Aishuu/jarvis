#ifndef MOVEMENT_NXC
#define MOVEMENT_NXC

#include "constant.h"

#include "rotate.nxc"
#include "translate.nxc"

#define CHECK_THETA_RATE            15000
#define NO_THETA_SPECIFIED          2000
#define XMAX                        60         //cm
#define XMIN                        ( -1*60 )  //cm
#define YMAX                        69.4       //cm
#define YMIN                        ( -1*30.6 )//cm
#define DEFAULT_COLLISION_MARGIN    2.0        //cm

#define CALIB_LENGTH                21.5       //cm

//Some info on Jarvis' dimensions
// <!> Point names based on how Jarvis looks when "current_pos.theta"=PI(rad)
// <!> Values based on actual points' position when ""current_pos.theta"=0
#define JURRHO         15.81           //jarvis' upper right extreme point rho length (cm)
#define JURTHE         ( -1*0.9019842 )//jarvis' upper right extreme point theta angle (rad)
#define JLRRHO         20.42           //jarvis' lower right extreme point rho length (cm)
#define JLRTHE         ( -1*2.5820859 )//jarvis' lower right extreme point theta angle (rad)
#define NB_CTR_PTS     4               //Number of contour points
//Jarvis' length with the arm   --> TODO continuous length estimation with arm length&angle

// Global variables for movement module
   //Point:           UpR      UpL    LowR     LowL
const float rho[]={JURRHO,  JURRHO, JLRRHO,  JLRRHO}; //static rho: geometrical parameter of jarvis (cm)
const float the[]={JURTHE, -JURTHE, JLRTHE, -JLRTHE}; //static theta: geometrical parameter of jarvis (rad)
      float angle1[ NB_CTR_PTS+1 ];                   //lower angle value ->to be computed  -- the '+1' value is to facilitate min/max computation over several loops...
      float angle2[ NB_CTR_PTS+1 ];                   //upper angle value ->to be computed
      float trans[ NB_CTR_PTS ];                      //translation values ->to be computed
float inf_rot_lim,sup_rot_lim;                        //InBound rotation limits
float inf_trans_lim,sup_trans_lim;                    //InBound translation limits
enum TypeWall {XPOS=0,YPOS=1,XNEG=2,YNEG=3};          //wall designation


///////////////
// Functions //
///////////////
void init_pos() {
     compass_start = compass;
     current_pos.theta = 90;
     current_pos.x = 0;
     current_pos.y = 0;
     current_pos.r_tacho_last_rotate = MotorRotationCount(OUT_B);
     current_pos.l_tacho_last_rotate = MotorRotationCount(OUT_A);
     current_pos.angle_last_rotate = 0;
     current_pos.angle_cumul = 0;
}

void moveTo(float x, float y, float theta=NO_THETA_SPECIFIED) {
     float dx,dy,dist,angle;

     dx=x-current_pos.x;
     dy=y-current_pos.y;

     dist=sqrt(dx*dx+dy*dy);
     angle=atan2(dy,dx)*180/PI;

     setTheta(angle);
     translate(dist);
     if(theta != NO_THETA_SPECIFIED)
        setTheta(theta);
}


//////////////////////////////////
// Boundary checks for movement //
//////////////////////////////////

float computeDist2Wall(TypeWall wall){
//compute distance from tracked point to wall 'wall'
     float dist2Wall;
     switch(wall){
        case YPOS:
           dist2Wall=YMAX-current_pos.y; break;
        case XNEG:
           dist2Wall=current_pos.x-XMIN; break;
        case YNEG:
           dist2Wall=current_pos.y-YMIN; break;
        default: //XPOS
           dist2Wall=XMAX-current_pos.x; break;
     }
     return dist2Wall;
} //computeDist2Wall

void computeLimitTranslation(TypeWall wall) {
//compute the limit translation until 'wall' is reached according to current position
     //compute current distance to wall
     float dist2Wall=computeDist2Wall(wall);
     //convert to rad and correct the value according to wall
     float theta_rad=current_pos.theta*PI/180-wall*PI/2;
     for(int i=0;i<NB_CTR_PTS;i++){ //compute the limit translation for each contour point
     //          (actual distance of ctr_point to wall  )/(cos of the angle between bearing and direction of the wall)
        trans[i]=(dist2Wall-rho[i]*cos(theta_rad+the[i]))/cos(theta_rad);
     }
} //computeLimitTranslation

void computeLimitAngles(TypeWall wall) {
//compute the limit rotation angles until 'wall' is reached according to current position
     float rel_zero;
     float dist2Wall=computeDist2Wall(wall);

     //compute limit angles for contour points
     for(int i=0;i<NB_CTR_PTS;i++) {
        if(dist2Wall<=rho[i]){
           //limit angles exist
           //find angle1/2 s.t angle1<=the<=angle2
           //--> rho*cos(the)<=abs(dist2Wall)
           angle1[i]=acos(dist2Wall/rho[i]);      //rad
           angle2[i]=2*PI-angle1[i];

           //set relative zero: current angle (rad) with correction depending on 'wall'
           rel_zero=current_pos.theta*PI/180+the[i]-wall*PI/2;
           while(rel_zero<0)
              rel_zero+=2*PI; //we want rel_zero in [0, 2PI[ -- actually we want angle1<rel_zero<angle2
           #ifndef DEBUG
           if(rel_zero<angle1[i] || rel_zero>angle2[i] || angle2[i]-angle1[i]>2*PI) {
           #endif
              //something went wrong (code or model)
              Ds(5,"point",i);
              Ds(6,"angle1",angle1[i]);
              Ds(7,"angle2",angle2[i]);
              Ds(8,"rel_z",rel_zero);
              Wait(10000);
           #ifndef DEBUG
           }
           #endif

           //retrieve rotation values
           angle1[i]-=rel_zero;
           angle2[i]-=rel_zero;
        } else { //no limits
           angle1[i]=-PI;
           angle2[i]=PI;
        }
     }//for loop (on points)
} //computeLimitAngles

bool checkTranslationInBound2(float translation2check, float margin=DEFAULT_COLLISION_MARGIN){
   inf_trans_lim=-10000;
   sup_trans_lim=10000;
   for(int wall=0;wall<4;wall++){ //loop on 4 walls
      //compute translation limit for 'wall'
      computeLimitTranslation(wall);
      for(int k=0;k<NB_CTR_PTS;k++){ //loop on contour points
         if(trans[k]>=0){
            if(trans[k]<sup_trans_lim)
               sup_trans_lim=trans[k];
         } else {
            if(trans[k]>inf_trans_lim)
               inf_trans_lim=trans[k];
         }
      } //loop on contour points (k var)
   } // loop on 4 walls

   #ifdef DEBUG
   Ds(4,"suptrans",sup_trans_lim);
   Ds(5,"inftrans",inf_trans_lim);
   #endif
   return (translation2check<=sup_trans_lim) && (translation2check>=inf_trans_lim);
} //checkTranslationInBound2

bool checkRotationInBound(float rotation2check, float margin=DEFAULT_COLLISION_MARGIN) {
     // Implicit assumption: current position is legit (and valid)
     //assuming (x,y) stay constant
     //the set of valid (X,Y,theta) can be convexified
     //(yup, the author prefers manipulating convex sets)
     inf_rot_lim=0;
     sup_rot_lim=0;
     for(int wall=0;wall<4;wall++){ //loop on 4 walls
        //compute limit rotation angles for 'wall'
        computeLimitAngles(wall);

        //add in initial/previous values to find min/max
        angle1[NB_CTR_PTS]=inf_rot_lim;
        angle2[NB_CTR_PTS]=sup_rot_lim;
        
        //find min/max
        inf_rot_lim=ArrayMin(angle1,NA,NA);
        sup_rot_lim=ArrayMax(angle2,NA,NA);
     }
     
     //convert from rad to °
     inf_rot_lim=inf_rot_lim*180/PI;
     sup_rot_lim=sup_rot_lim*180/PI;
     return (rotation2check<=sup_rot_lim) && (rotation2check>=inf_rot_lim);
} //checkRotationInBound


/////////////////////////////
// Safe movement functions //
/////////////////////////////
bool safeSetTheta(float theta2Set) {
     float rotation = theta2Set-current_pos.theta;
     
     while(rotation<-180){
         rotation+=360;
     }
     while(rotation>180){
         rotation-=360;
     }
     
     if( checkRotationInBound(rotation) ) {
         rotate(rotation);
         return true;
     }
     
     if( rotation<0 ){
         rotation+=360;
     } else {
         rotation-=360;
     }
     if( checkRotationInBound(rotation) ) {
         rotate(rotation);
         return true;
     }
     
     return false;
}

void safeBackTo(float x, float y, float theta=NO_THETA_SPECIFIED) {
     float dx,dy,dist,angle;
     MV_OUT_OF_BOUND=false;

     dx=x-current_pos.x;
     dy=y-current_pos.y;

     dist=sqrt(dx*dx+dy*dy);

     //standard angle computation
     angle=atan2(dy,dx)*180/PI;
     //change to face backward
     angle=(angle+180) % 360;

     if( ! safeSetTheta(angle) ) {
        MV_OUT_OF_BOUND=true;
        return;
     }

     if(checkTranslationInBound2(-dist))
        translate(-dist);
     else {
        MV_OUT_OF_BOUND=true;
        translate(inf_trans_lim+DEFAULT_COLLISION_MARGIN);
     }

     if(theta != NO_THETA_SPECIFIED)
        if( ! safeSetTheta(theta) ) {
           MV_OUT_OF_BOUND=true;
           return;
        }
        
     return;
} //safeBackTo


void safeMoveTo(float x, float y, float theta=NO_THETA_SPECIFIED) {
     float dx,dy,dist,angle;
     MV_OUT_OF_BOUND=false;

     dx=x-current_pos.x;
     dy=y-current_pos.y;

     dist=sqrt(dx*dx+dy*dy);

     angle=atan2(dy,dx)*180/PI;

     if( ! safeSetTheta(angle) ) {
        safeBackTo(x,y,theta);
        return;
     }
     
     if(checkTranslationInBound2(dist))
        translate(dist);
     else {
        MV_OUT_OF_BOUND=true;
        translate(sup_trans_lim-DEFAULT_COLLISION_MARGIN);
        return;
     }
     
     if(theta != NO_THETA_SPECIFIED)
        if( ! safeSetTheta(theta) ) {
           MV_OUT_OF_BOUND=true;
           return;
        }

     return;
} //safeMoveTo


/////////////
//  Calib  //
/////////////
bool calibY(){
    if(!safeSetTheta(90)){
        safeMoveTo(0,0);
    }
    if(!safeSetTheta(90) || MV_OUT_OF_BOUND){
       return false;
    }
    
    while(! touch){
       translate(-5);
    }
    STOP=true;
    
    current_pos.y=YMIN+CALIB_LENGTH;
    return true;
} //calibY

bool calibXNEG(){
    if(!safeSetTheta(0)){
        safeMoveTo(0,0);
    }
    if(!safeSetTheta(0) || MV_OUT_OF_BOUND){
       return false;
    }

    while(! touch){
       translate(-5);
    }
    STOP=true;

    current_pos.x=XMIN+CALIB_LENGTH;
    return true;
} //calibXNEG

bool calibXPOS(){
    if(!safeSetTheta(180)){
        safeMoveTo(0,0);
    }
    if(!safeSetTheta(180) || MV_OUT_OF_BOUND){
       return false;
    }

    while(! touch){
       translate(-5);
    }
    STOP=true;

    current_pos.x=XMAX-CALIB_LENGTH;
    return true;
} //calibXPOS

bool calibX(){
    if(current_pos.x<0){
       return calibXNEG();
    } else {
       return calibXPOS();
    }
} //calibX

#endif //movement.nxc
