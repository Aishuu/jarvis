#ifndef SCAN_NXC
#define SCAN_NXC

#include "constant.h"
#include "movement.nxc"
#include "geometry.nxc"

#define BALL_THRESH 10 //dist2wall method threshold
#define VAR_THRESH  4 //mean/variance method threshold

void getScanVal(float &dist, float &theta) {
   Wait(1000);
   dist=ultras;
   #ifdef SCAN_COMPASS
   theta=450-(compass-compass_start);
   #else
   theta=current_pos.theta;
   #endif
} //getScanVal

bool scanStep(float &ball_x, float &ball_y){
   //returns true if there may be a ball in ball_x ball_y
   //else false
   //ball_x and ball_y are ALWAYS filled in with cart values of nearest object
   
   float dist,theta,tmp[4],dist2Wall;

   getScanVal(dist,theta);

   //compute min dist to wall
   for(int k=0; k<4; k++) {
      tmp[k]=computeDist2Wall(k,current_pos.x,current_pos.y);
   }
   dist2Wall=ArrayMin(tmp,NA,NA);
   Ds(6,"dist2",dist2Wall);

   
   if(dist2Wall>dist+GEO_RADAR+BALL_THRESH) {
      return true;
   } else {
      return false;
   }
} //scanStep

void find_ball(bool &ball_found, float &ball_found_x, float &ball_found_y) {
   for(int k=0; k<24; k++) {
      ball_found=scanStep(ball_found_x,ball_found_y);
      if(ball_found)
         return;
      rotate(15);
   }
   
   ball_found=false;
   return;
}

#endif //scan.nxc
